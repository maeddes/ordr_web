version: "3.8"
services:
  mongodb:
    image: mongo
    container_name: mongodb
    ports:  
      - 27017:27017
    volumes:
      - data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
      - oplacesnetwork

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports: 
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
      - oplacesnetwork
  spring-app:
    image: test-java:v0.1
    build:
      context: ./backend/
      dockerfile: Dockerfile   
    container_name: spring-app-container
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_DATABASE: oplaces
      SPRING_DATA_MONGODB_USERNAME: rootuser
      SPRING_DATA_MONGODB_PASSWORD: rootpass
      SPRING_DATA_MONGODB_AUTHENTICATION-DATABASE: admin
      SPRING_DATA_MONGODB_PORT: 27017
      OTEL_SERVICE_NAME: spring-app
      OTEL_TRACES_EXPORTER: jaeger
      OTEL_METRICS_EXPORTER: none
      OTEL_EXPORTER_JAEGER_ENDPOINT: http://jaeger:14250
    
    networks:
      - oplacesnetwork  
  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    image: img-frontend
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - spring-app
    networks:
      - oplacesnetwork
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest      
    restart: always
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - oplacesnetwork
            
volumes:
  data: {}

networks:
  oplacesnetwork:
    driver: bridge
